import static com.ncc.common.JSScriptReplacer.*

defaultTasks 'clean', 'build'

repositories {
    mavenCentral()
}

// task groupings we add
def DEPLOY_GROUP = 'deploy'

def owfTomcat = (hasProperty('OWF_TOMCAT') ? OWF_TOMCAT : System.env.OWF_TOMCAT) ?: '/opt/owf/apache-tomcat-7.0.21'
def owfTomcatWebapps = owfTomcat + '/webapps'

// the neon-server is just output as neon.js for simpler referencing
project(":neon-server").ext.outfile = 'neon'

subprojects {

    version = '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    apply plugin: 'war'
    apply plugin: 'idea'
    apply plugin: 'jetty'
    apply from: "${rootDir}/gradle/js.gradle"
    apply from: "${rootDir}/gradle/wrapper.gradle"

    war {
        description = 'Creates a war file for the project'
        // strip out the version from the war
        version ""
    }

    enableJSResourceFiltering(project, project.war)

    task('deployToTomcat', type: Copy) {
        dependsOn war
        description = "Copies the project's war file to the owf tomcat webapps dir"
        group = DEPLOY_GROUP

        doFirst {
            delete "${owfTomcatWebapps}/${war.baseName}", "${owfTomcatWebapps}/${war.baseName}.war"
        }

        from war.destinationDir
        into owfTomcatWebapps

        doLast {
            println "Copying $war.archivePath into $owfTomcatWebapps"
        }
    }
    // if you want to use jettyrun for testing, this allows you to just include the individual js files and not the
    // concatenated one
    jettyRun.doFirst {
        // since css and js are both in the jsDependenciesDir include both the jsDependenciesDir and the jsDependenciesOutputDir
        // so we can references js files without the js/ prefix in development, but the css/ prefix stays consistent in development
        // and production
        def dirs = [file(webAppDirName).toString(), "${projectDir}/${jsSrcDir}", "${projectDir}/${jsLibDir}", jsDependenciesDir, jsDependenciesOutputDir.toString()].findResults { new File(it).exists() ? it : null } as String[]

        jettyRun.webAppConfig = new org.gradle.api.plugins.jetty.internal.JettyPluginWebAppContext()
        jettyRun.webAppConfig.baseResource = org.gradle.api.plugins.jetty.internal.JettyPluginWebAppContext.class.classLoader.loadClass("org.mortbay.resource.ResourceCollection").newInstance(dirs)
    }

}