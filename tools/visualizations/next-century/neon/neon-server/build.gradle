import com.mongodb.BasicDBObject
import com.mongodb.MongoClient
import com.mongodb.util.JSON
import com.ncc.neon.MongoJSONGenerator
import com.ncc.common.GruntTask
import org.apache.tools.ant.filters.ReplaceTokens

// define source sets first so tasks that act dynamically on sourcesets have a list of all of them
sourceSets {
    // contains the server integration tests
    integrationTest {
        resources {
            srcDir 'src/integrationTest/resources'
            srcDir 'src/test-data'
        }
    }
    acceptanceTest
}


apply from: 'gradle/groovy.gradle'

archivesBaseName = 'neon'
sourceCompatibility = 1.7

def TEST_GROUP = JavaBasePlugin.VERIFICATION_GROUP
def springVersion = "3.2.1.RELEASE"
def logbackVersion = "1.0.9"

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'http://repository.codehaus.org/'
        }
    }
    dependencies {
        classpath 'org.mongodb:mongo-java-driver:2.10.1'
    }
}

repositories {
    maven {
        url 'https://repository.cloudera.com/artifactory/public'
    }
}

project.ext {
    testDataDir = "${projectDir}/src/test-data"
    javadocTitle = "$libraryName API Documentation"

    // a mongo instance for inserting/deleting test data (will be lazy initialized)
    mongoInstance = null
}


configurations {
    integrationTestCompile { extendsFrom testCompile }
    integrationTestRuntime { extendsFrom integrationTestCompile, testRuntime }

    acceptanceTestCompile { extendsFrom testCompile }
    acceptanceTestRuntime { extendsFrom testCompile, testRuntime }
}

dependencies {
    compile 'com.sun.jersey:jersey-servlet:1.15'
    compile 'com.sun.jersey:jersey-core:1.15'
    compile 'com.sun.jersey:jersey-client:1.15'
    compile 'com.sun.jersey:jersey-server:1.15'
    compile 'com.sun.jersey:jersey-json:1.15'
    compile 'com.sun.jersey.contribs:jersey-spring:1.15'
    compile 'org.mongodb:mongo-java-driver:2.10.1'
    compile "org.springframework:spring-web:$springVersion"
    compile 'joda-time:joda-time:2.1'
    compile 'org.slf4j:slf4j-api:1.7.2'
    compile "ch.qos.logback:logback-core:$logbackVersion"
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "com.google.guava:guava:14.0.1"
    compile 'org.antlr:antlr4-runtime:4.0'
    compile('org.codehaus.groovy.modules.http-builder:http-builder:0.6') {
        // we already include groovy-all - this prevents bringing groovy in twice
        exclude module: 'groovy'
    }
    compile 'commons-lang:commons-lang:2.6'
    compile 'org.json:json:20090211'
    compile('org.apache.hive:hive-jdbc:0.10.0-cdh4.2.1') {
        exclude module: 'servlet-api'
        exclude module: 'slf4j-log4j12'
    }
    compile('org.apache.hadoop:hadoop-core:2.0.0-mr1-cdh4.2.1') {
        exclude module: 'servlet-api'
        exclude module: 'jsp-api'
        exclude module: 'jasper-runtime'
        exclude module: 'jasper-compiler'
    }

    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'

    runtime 'cglib:cglib:2.2.2'

    testCompile 'junit:junit:4.11'
    testCompile 'commons-collections:commons-collections:3.2.1'
    testCompile 'commons-io:commons-io:2.4'
    testCompile "org.springframework:spring-test:$springVersion"

    integrationTestCompile files(sourceSets.main.output.classesDir)
    integrationTestCompile files(sourceSets.test.output.classesDir)
}

war {
    from(jsOutputFile) {
        into 'js'
    }

}

test {
    def props = [:]
    props['unit.test'] = true
    systemProperties props
}


task integrationTests(type: Test) {
    dependsOn 'assemble', 'integrationTestClasses', 'generateMongoJson'

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    def props = [:]
    def mongoHostProperty = getMongoHosts()
    if (mongoHostProperty) {
        props["mongo.hosts"] = mongoHostProperty
    }

    props['integration.test'] = true
    systemProperties props
}

task transformTestWebService(type: org.gradle.api.plugins.jetty.JettyRun) {
    dependsOn 'acceptanceTestClasses'
    daemon = true
    httpPort = 10008
    stopPort = httpPort + 2
    stopKey = 'stop'
    classpath = sourceSets.acceptanceTest.runtimeClasspath
    webXml = new File(sourceSets.acceptanceTest.output.resourcesDir, 'test-services-web.xml')
}

task acceptanceTestWar(type: org.gradle.api.plugins.jetty.JettyRunWar) {
    dependsOn 'acceptanceTestClasses'
    daemon = true
    httpPort = 10002
    stopPort = httpPort + 2
    stopKey = 'stop'
    jettyConfig = new File(sourceSets.acceptanceTest.output.resourcesDir, 'jetty-config.xml')
}

processAcceptanceTestResources {
    from(sourceSets.acceptanceTest.resources.srcDirs) {
        filter(ReplaceTokens, tokens: [
                "mongo.hosts": getMongoHosts()
        ])
    }
}

def getMongoHosts() {
    return project.hasProperty("mongo.hosts") ? getProperty("mongo.hosts") : "localhost"
}

task acceptanceTest(type: GruntTask) {
    dependsOn 'assemble', 'acceptanceTestWar', 'generateMongoJson', 'transformTestWebService'
    group = TEST_GROUP
    gruntArgs "jasmine:acceptance", "--outfile=${jsOutputFile}"

    doFirst {
        // just in case any data got left around in the event that a cleanup failed, delete the data before inserting it
        deleteAcceptanceTestData()
        insertAcceptanceTestData()
    }
}


gradle.taskGraph.afterTask { task ->
    if (task == acceptanceTest) {
        deleteAcceptanceTestData()
    }
}

task generateMongoJson {
    MongoJSONGenerator.generateMongoJson(testDataDir, "${testDataDir}/mongo-json")
}

def insertAcceptanceTestData() {
    def db = getMongo().getDB("acceptanceTest")
    def collection = db.getCollection("records")
    def dbList = JSON.parse(new File(testDataDir, '/mongo-json/data.json').text)
    collection.insert(dbList)
    collection.ensureIndex(new BasicDBObject("location", "2dsphere"))
}

def deleteAcceptanceTestData() {
    def db = getMongo().getDB("acceptanceTest")
    db.dropDatabase()
}

def getMongo() {
    if (!mongoInstance) {
        mongoInstance = new MongoClient(getMongoHosts())
    }
    return mongoInstance
}