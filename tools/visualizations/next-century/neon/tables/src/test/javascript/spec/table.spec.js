/*
 * ************************************************************************
 * Copyright (c), 2013 Next Century Corporation. All Rights Reserved.
 *
 * This software code is the exclusive property of Next Century Corporation and is
 * protected by United States and International laws relating to the protection
 * of intellectual property.  Distribution of this software code by or to an
 * unauthorized party, or removal of any of these notices, is strictly
 * prohibited and punishable by law.
 *
 * UNLESS PROVIDED OTHERWISE IN A LICENSE AGREEMENT GOVERNING THE USE OF THIS
 * SOFTWARE, TO WHICH YOU ARE AN AUTHORIZED PARTY, THIS SOFTWARE CODE HAS BEEN
 * ACQUIRED BY YOU "AS IS" AND WITHOUT WARRANTY OF ANY KIND.  ANY USE BY YOU OF
 * THIS SOFTWARE CODE IS AT YOUR OWN RISK.  ALL WARRANTIES OF ANY KIND, EITHER
 * EXPRESSED OR IMPLIED, INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ARE HEREBY EXPRESSLY
 * DISCLAIMED.
 *
 * PROPRIETARY AND CONFIDENTIAL TRADE SECRET MATERIAL NOT FOR DISCLOSURE OUTSIDE
 * OF NEXT CENTURY CORPORATION EXCEPT BY PRIOR WRITTEN PERMISSION AND WHEN
 * RECIPIENT IS UNDER OBLIGATION TO MAINTAIN SECRECY.
 */


describe('table', function () {


    beforeEach(function () {
        setFixtures("<div id='table'></div>");

    });

    it('converts the column names to slick grid format', function () {

        var columnNames = ['c1', 'c2', 'c3'];
        var data = [
            {"c1": "v1", "c2": "v2", "c3": "v3"}
        ];

        var slickgridFormat = [
            { id: 'c1', name: 'c1', field: 'c1'},
            { id: 'c2', name: 'c2', field: 'c2'},
            { id: 'c3', name: 'c3', field: 'c3'}
        ];

        // we only care about the id, name and field properties for this test since they indicate how the
        // column's data is configured
        var table = new tables.Table('#table', {data: data, columns: columnNames});
        var actual = table.columns_.map(function (row) {
            return lodash.pick(row, 'id', 'name', 'field');
        });

        expect(actual).toBeEqualArray(slickgridFormat);

    });

    it('gathers the column names if they are not explicitly specified', function () {

        var data = [
            {"c1": "v1", "c2": "v2"},
            {"c1": "v1", "c2": "v2", "c3": "v3"}
        ];

        var slickgridFormat = [
            { id: 'c1', name: 'c1', field: 'c1'},
            { id: 'c2', name: 'c2', field: 'c2'},
            { id: 'c3', name: 'c3', field: 'c3'}
        ];

        // we only care about the id, name and field properties for this test since they indicate how the
        // column's data is configured
        var table = new tables.Table('#table', {data: data});
        var actual = table.columns_.map(function (row) {
            return lodash.pick(row, 'id', 'name', 'field');
        });

        expect(actual).toBeEqualArray(slickgridFormat);


    });

    it('appends sets up the slickgrid dataview', function() {
        var columnNames = ['c1', 'c2', 'c3'];
        var data = [
            {"c1": "v1", "c2": "v2", "c3": "v3"}
        ];
        var table = new tables.Table('#table', {data: data, columns: columnNames});
        expect(table.dataView_.getItems()).toBeEqualArray(data);

    });

    it('appends an id field to the data if none is specified', function () {
        var data = [
            {"field1": 1, "field2": 2},
            {"field1": 3, "field2": 4},
            {"field1": 5, "field2": 6}
        ];

        var dataWithId = [
            {"field1": 1, "field2": 2},
            {"field1": 3, "field2": 4},
            {"field1": 5, "field2": 6}
        ];
        dataWithId[0][tables.Table.AUTOGENERATED_ID_FIELD_NAME_] = 0;
        dataWithId[1][tables.Table.AUTOGENERATED_ID_FIELD_NAME_] = 1;
        dataWithId[2][tables.Table.AUTOGENERATED_ID_FIELD_NAME_] = 2;

        // creating the table modifies the data
        new tables.Table('#table', { data: data, columns: ['field1', 'field2']});

        // the data should have been modified to append an id field
        expect(data).toBeEqualArray(dataWithId);
    });

    it('does not modify the data if an id field is specified', function () {
        var data = [
            {"myid": 123, "field1": 1, "field2": 2},
            {"myid": 456, "field1": 3, "field2": 4},
            {"myid": 789, "field1": 5, "field2": 6}
        ];

        // because an id field is specified, the expected data should match the original
        var expected = [
            {"myid": 123, "field1": 1, "field2": 2},
            {"myid": 456, "field1": 3, "field2": 4},
            {"myid": 789, "field1": 5, "field2": 6}
        ];

        new tables.Table('#table', { data: data, columns: ['field1', 'field2'], id: "myid"});
        expect(data).toBeEqualArray(expected);

    });

    it('sorts the data ascending', function () {
        setFixtures("<div id='table'></div>");
        var data = [
            { "field1": 3, "field2": 2},
            { "field1": 5, "field2": 4},
            { "field1": 1, "field2": 6}
        ];

        // simulate a sort
        var table = new tables.Table('#table', { data: data, columns: ['field1', 'field2']}).draw();
        clickHeader(table, 'field1');

        // the data should have been sorted
        var sorted = table.dataView_.getItems();
        expect(sorted[0].field1).toEqual(1);
        expect(sorted[1].field1).toEqual(3);
        expect(sorted[2].field1).toEqual(5);

    });

    it('sorts the data descending', function () {
        var data = [
            { "field1": 3, "field2": 2},
            { "field1": 5, "field2": 4},
            { "field1": 1, "field2": 6}
        ];

        // simulate a sort, but click twice to get to descending (first click is ascending)
        var table = new tables.Table('#table', { data: data, columns: ['field1', 'field2']}).draw();
        clickHeader(table, 'field1');
        clickHeader(table, 'field1');

        // the data should have been sorted
        var sorted = table.dataView_.getItems();
        expect(sorted[0].field1).toEqual(5);
        expect(sorted[1].field1).toEqual(3);
        expect(sorted[2].field1).toEqual(1);

    });

    function clickHeader(table, columnName) {
        var colIndex = table.table_.getColumnIndex(columnName);
        $('.slick-header-columns').children().eq(colIndex).trigger('click');
    }

});
