archivesBaseName = 'tables'

project.ext {
    jsSrcDir = 'src/main/javascript'
    jsLibDir = 'src/main/js-lib'
    combinedJsFileName = "${archivesBaseName}.js"
    jsOutputFile = "${buildDir}/${combinedJsFileName}"
    jsUnitTestDir = 'src/test/javascript'
}

javascript.source {
    dev {
        js {
            srcDir jsSrcDir
            include '**/*.js'
            exclude 'tablewidget.js'
        }
    }
}

combineJs {
    source = files(
            file("${jsLibDir}/jquery/jquery-1.7.min.js"),
            file("${jsLibDir}/jquery/jquery.event.drag-2.2.js"),
            file("${jsLibDir}/jquery/jquery-ui-1.8.16.custom.min.js"),
            file("${jsLibDir}/slickgrid/slick.core.js"),
            file("${jsLibDir}/slickgrid/slick.grid.js"),
            file("${jsLibDir}/slickgrid/slick.dataview.js"),
            file("${jsLibDir}/slickgrid/plugins/slick.autotooltips.js"),
            file("${jsLibDir}/mergesort/merge-sort.js"),
            javascript.source.dev.js.files)
    dest = file(jsOutputFile)
}



jshint {
    source = javascript.source.dev.js.files
}

war {
    dependsOn 'jshint', 'combineJs'

    // add flags for the javascript tests since they require external software to be
    // installed (nodejs/phantomjs). turning these off by default makes it easy for people to build the war
    // even if they don't have them installed
    if (isRunJavascriptTests()) {
        dependsOn 'jsPhantomUnitTest'
    }

    from(jsOutputFile) {
        into 'js'
    }
    from("${jsSrcDir}/tablewidget.js") {
        into 'js'
    }
}

// if you want to use jettyrun for testing, this allows you to just include the individual js files and not the
// concatenated one
jettyRun.doFirst {
    jettyRun.webAppConfig = new org.gradle.api.plugins.jetty.internal.JettyPluginWebAppContext()
    jettyRun.webAppConfig.baseResource = org.gradle.api.plugins.jetty.internal.JettyPluginWebAppContext.class.classLoader.loadClass("org.mortbay.resource.ResourceCollection").newInstance(
            [
                    "${file(webAppDirName)}",
                    "${projectDir}/src/main/javascript",
                    "${projectDir}/src/main/js-lib"
            ] as String[])
}

task jsPhantomUnitTest(type: Exec) {
    dependsOn 'createJasmineUnitSpecRunnerHtml'
    description = 'Runs the Jasmine unit test suite using phantomjs (requires phantomjs to be installed and on path)'
    commandLine "phantomjs", phantomJsRunner, "${projectDir}/${jsUnitTestDir}/spec_runner_unit.html"
}

task createJasmineUnitSpecRunnerHtml << {
    description = 'Creates the jasmine spec runner html file for javascript unit tests'
    doCreateJasmineSpec(projectDir, jsUnitTestDir, 'unit', "../../../build/${combinedJsFileName}")
}

def isRunJavascriptTests() {
    return hasProperty('jsUnitTest')
}