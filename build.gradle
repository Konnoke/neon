/*
 * Copyright 2013 Next Century Corporation
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import static com.ncc.common.JSScriptReplacer.*
import com.ncc.common.JettyTaskUtils

defaultTasks 'clean', 'build'

repositories {
    mavenCentral()
}

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.hidetake:gradle-ssh-plugin:0.2.0'
  }
}

project.ext {
    logbackVersion = "1.0.13"
    springVersion = "3.2.1.RELEASE"
}

// task groupings we add
def DEPLOY_GROUP = 'deploy'

// nego server to deploy to. may be remote or local, depending on the remote configuration
def neonServer = (hasProperty('NEON_SERVER') ? NEON_SERVER : System.env.NEON_SERVER) ?: '/opt/owf/apache-tomcat-7.0.21'
def neonServerWebapps = neonServer + '/webapps'

// these are set to empty string, not null, when not provided. otherwise the ssh task will choke
def remoteUser = hasProperty('user') ? user : ''
def remoteHost = hasProperty('host') ? host : ''

// these are set to null since the ssh task expects them not to be set if they are not being used
def remotePassword = hasProperty('password') ? password : null
def sshIdentity = hasProperty('sshKeyFile') ? file(sshKeyFile) : null

//This must be a valid semantic version.
def CURRENT_NEON_VERSION = "0.8.0"
version = CURRENT_NEON_VERSION

project(":common").version = CURRENT_NEON_VERSION
project(":metadata").version = CURRENT_NEON_VERSION
configure(subprojects.findAll { it.name != 'common' && it.name != 'metadata'}) {
    version = CURRENT_NEON_VERSION

    apply plugin: 'war'
    apply plugin: 'ssh'

    apply from: "${rootDir}/gradle/js.gradle"

    repositories {
        mavenCentral()
    }

    dependencies {
        compile (project(":common")){
            exclude module: 'javax.servlet.jsp-api'
        }
    }

    war {
        description = 'Creates a war file for the project'

        // not all projects will have all of these directories, so it will just copy the needed ones
        from(jsOutputFile) {
            into 'js'
        }

        // note the common js does not need to be copied here because it is concatenated in to the jsoutputfile
        from(cssDependenciesOutputDir) {
            into 'css'
        }

        from(imgDependenciesOutputDir) {
            into 'img'
        }

    }

    enableJSResourceFiltering(project, project.war)

    def jsFiles = fileTree(jsSrcDir).include("**/*.js") +
            fileTree(jsLibDir).include("**/*.js") +
            fileTree(jsDependenciesOutputDir).include("**/*.js") +
            fileTree("src/test/javascript").include("**/*.js")

    // ensure that javascript tasks are properly configured to copy dependencies, but to only run when
    // they actually change. note: we don't just attach to all GruntTask types because the acceptance test is a
    // bit different and it's not just dependent on javascript changes
    ['concatjs','gruntjs'].each { name ->
        project.getTasksByName(name, false).each { task ->
            task.dependsOn 'copyCommon'
            task.inputs.files { jsFiles }
            task.outputs.file { jsOutputFile }
        }
    }

    task('deployToTomcat', type: Copy) {
        dependsOn war
        description = "Copies the project's war file to the neon server tomcat webapps dir"
        group = DEPLOY_GROUP

        doFirst {
            delete "${neonServerWebapps}/${war.baseName}", "${neonServerWebapps}/${war.baseName}.war"
        }

        from (war.destinationDir){
            rename { "${war.baseName}.war" }
        }
        into neonServerWebapps

        doLast {
            println "Copying $war.archivePath to $neonServerWebapps/${war.baseName}.war"
        }
    }

    ssh {
        config(StrictHostKeyChecking: 'no')
    }
    remotes {
        neon {
           host = remoteHost
           user = remoteUser
           password = remotePassword
           identity = sshIdentity
        }
    }

    task 'remoteTomcatDeploy'(type: SshTask) {
        dependsOn war
        description = "Copies the project's war file to the neon server tomcat webapps dir on a remote serer"
        group = DEPLOY_GROUP
        doFirst {
		if (!remoteHost || !remoteUser || !(remotePassword || sshIdentity)) {
	          throw new GradleException("Must specify -Phost=<host>, -Puser=<user> and either -Ppassword=<password> or -PsshKeyFile=<ssh-key-file-path> properties to deploy to a remote server")
                }
        }
        session(remotes.neon) {
            execute("rm -rf ${neonServerWebapps}/${war.baseName} ${neonServerWebapps}/${war.baseName}.war")
            put(war.archivePath.absolutePath,"${neonServerWebapps}/${war.baseName}.war")
        }
    }

    task copyCommon {
        dependsOn 'copyCommonJs', 'copyCommonCss', 'copyCommonImages'
    }

    task copyCommonJs(type: Copy) {
        from(new File(projectDir.parentFile, "common/js").absolutePath)
        into jsDependenciesOutputDir
    }

    task copyCommonCss(type: Copy) {
        from(new File(projectDir.parentFile, "common/css").absolutePath)
        into cssDependenciesOutputDir
    }

    task copyCommonImages(type: Copy) {
        from(new File(projectDir.parentFile, "common/img").absolutePath)
        into imgDependenciesOutputDir
    }
}

task jettyRunAll(type: com.ncc.common.JettyRunAll) {
    dependsOn ':neon:concatjs'
    ssl = true
    keystorePath = this.class.getResource("/keystore").file
    keystorePassword = "neon"
    port = ssl ? 9443 : 9000


    def serverProject = project(":neon")
    def serverProjectName = serverProject.name
    serverProject.sourceSets.main.runtimeClasspath += files("${serverProject.buildDir}/config")

    doFirst {
        System.setProperty("log.dir", "${serverProject.buildDir}/jettyRunAllLogs")
    }

    directoriesClosure = { proj ->
        def dirs = [
                // we modify the project's webAppDir to use a generated-web for javascript resource filtering,
                // so hardcode the src/main/webapp instead of using the project.webAppDir
                "${proj.projectDir}/src/main/webapp",
                // src/main is for javascript and js-lib
                "${proj.projectDir}/src/main",
                proj.dependenciesDir.toString(),
                new File(proj.projectDir.parentFile, "common").absolutePath
        ]
        // add the concatenated server javascript so the widgets can access it
        if (proj.name == serverProjectName) {
            dirs << proj.buildDir.absolutePath
        }
        return dirs
    }

}
