apply plugin: 'eclipse'

import static com.ncc.common.JSScriptReplacer.*
import com.ncc.common.JettyTaskUtils

defaultTasks 'clean', 'build'

repositories {
    mavenCentral()
}

// task groupings we add
def DEPLOY_GROUP = 'deploy'

def owfTomcat = (hasProperty('OWF_TOMCAT') ? OWF_TOMCAT : System.env.OWF_TOMCAT) ?: '/opt/owf/apache-tomcat-7.0.21'
def owfTomcatWebapps = owfTomcat + '/webapps'
def jettyHttpPort = 9000
def jettyHttpsPort = 9443

// the neon-server is just output as neon.js for simpler referencing
project(":neon-server").ext.outfile = 'neon'

/**
 * Gets any directories that are webapp roots for jetty run
 * @param project
 */
def getJettyRunRootDirectories = { project ->
    return [
            // we modify the project's webAppDir to use a generated-web for javascript resource filtering,
            // so hardcode the src/main/webapp instead of using the project.webAppDir
            "${project.projectDir}/src/main/webapp".toString(),
            // src/main is for javascript and js-lib
            "${project.projectDir}/src/main".toString(),
            project.dependenciesDir.toString(),
            new File(project.projectDir.parentFile, "common").absolutePath
    ]
}

subprojects {

    version = '1.0.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    apply plugin: 'war'
    apply plugin: 'idea'
    apply plugin: 'jetty'
    apply from: "${rootDir}/gradle/js.gradle"

    war {
        description = 'Creates a war file for the project'
        // strip out the version from the war
        version ""

        // not all projects will have all of these directories, so it will just copy the needed ones
        from(jsOutputFile) {
            into 'js'
        }

        // note the common js does not need to be copied here because it is concatenated in to the jsoutputfile
        from(cssDependenciesOutputDir) {
            into 'css'
        }

        from(imgDependenciesOutputDir) {
            into 'img'
        }
    }

    enableJSResourceFiltering(project, project.war)

    // concat can be run either standalone or through gruntjs ,so add the dependency to both
    project.getTasksByName('concatjs', false).each { task ->
        task.dependsOn 'copyCommon'
    }

    project.getTasksByName('gruntjs', false).each { task ->
        task.dependsOn 'copyCommon'
    }


    task('deployToTomcat', type: Copy) {
        dependsOn war
        description = "Copies the project's war file to the owf tomcat webapps dir"
        group = DEPLOY_GROUP

        doFirst {
            delete "${owfTomcatWebapps}/${war.baseName}", "${owfTomcatWebapps}/${war.baseName}.war"
        }

        from war.destinationDir
        into owfTomcatWebapps

        doLast {
            println "Copying $war.archivePath into $owfTomcatWebapps"
        }
    }
    jettyRun.httpPort = jettyHttpPort
    jettyRunWar.httpPort = jettyHttpPort
    jettyRun.doFirst {
        jettyRun.webAppConfig = JettyTaskUtils.createJettyRunContext(getJettyRunRootDirectories.call(project))
    }

    task copyCommon {
        dependsOn 'copyCommonJs', 'copyCommonCss', 'copyCommonImages'
    }

    task copyCommonJs(type: Copy) {
        from(new File(projectDir.parentFile, "common/js").absolutePath)
        into jsDependenciesOutputDir
    }

    task copyCommonCss(type: Copy) {
        from(new File(projectDir.parentFile, "common/css").absolutePath)
        into cssDependenciesOutputDir
    }

    task copyCommonImages(type: Copy) {
        from(new File(projectDir.parentFile, "common/img").absolutePath)
        into imgDependenciesOutputDir
    }

}

task jettyRunAll(type: com.ncc.common.JettyRunAll) {
    dependsOn ':neon-server:concatjs'
    ssl = true
    keystorePath = this.class.getResource("/keystore").file
    keystorePassword = "neon"
    port = ssl ? jettyHttpsPort : jettyHttpPort

    // look up the project using the project function to ensure we're using a valid project name
    def serverProjectName = project(":neon-server").name
    // add the concatenated server javascript so the widgets can access it
    directoriesClosure = { proj ->
        def dirs = getJettyRunRootDirectories.call(proj)
        if (proj.name == serverProjectName) {
            dirs << proj.buildDir.absolutePath
        }
        return dirs

    }

}
