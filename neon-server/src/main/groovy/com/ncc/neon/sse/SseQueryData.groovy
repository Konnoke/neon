package com.ncc.neon.sse

import com.ncc.neon.query.Query

class SseQueryData {

    // Whether or not the query is still actively being processed.
    boolean active

    // Whether or not the query was completed (for use if/when result caching is implemented).
    boolean complete

    // Number of records in the collection the query is acting on.
    long count

    // Current minimum value of the random value field in the collection the query is acting on.
    double randMin

    // Current step value of the random value field in the collection the query is acting on.
    double randStep

    // Current maximum  value of the random value field in the collection the query is acting on.
    double randMax

    // Host of the database the query was executed on, so that when comparing identical queries on different databases they can be distinguished.
    String host

    // Type of database the query was executed on, so that identically-named databases on different data stores can be distinguished.
    String databaseType

    // Extra information associated with the query.
    boolean ignoreFilters
    boolean selectionOnly
    Set<String> ignoredFilterIds

    // z(p) value associated with the desired confidence of this query.
    double zp

    // Number of records that have been looked through so far for this query.
    long traversed

    // Query this data is associated with.
    Query query

    // Statistical results (or results so far, if incomplete) of the query. Each  key is an ID generated by makeId() in SseQueryService,
    // and each value should be a com.ncc.neon.sse.SinglePointStats object.
    Map runningResults = [:]
}