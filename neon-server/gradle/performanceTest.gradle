/*
 * Copyright 2013 Next Century Corporation
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.api.plugins.jetty.internal.Monitor

apply plugin: 'scala'
apply plugin: 'jetty'

def concurrencyTestSourceDir = 'src/concurrencyTest/scala'
def concurrencyTestPort = 11402
def TEST_GROUP = JavaBasePlugin.VERIFICATION_GROUP

sourceSets {
    concurrencyTest {
        scala.srcDir file(concurrencyTestSourceDir)
        compileClasspath = configurations.concurrencyTestCompile
        runtimeClasspath = output + compileClasspath + configurations.concurrencyTestRuntime
    }
}

repositories {
    mavenCentral()
    maven { url "http://repository.excilys.com/content/groups/public" }
}

configurations {
    concurrencyTestCompile
    concurrencyTestRuntime { extendsFrom concurrencyTestCompile }
}

dependencies {
    compile 'org.scala-lang:scala-library:2.10.3'
    concurrencyTestCompile("com.excilys.ebi.gatling.highcharts:gatling-charts-highcharts:1.5.3")
    concurrencyTestRuntime "com.excilys.ebi.gatling:gatling-app:1.5.3"
}

task gatling {
    dependsOn 'concurrencyTestWar', 'insertDataIntoMongo', 'insertDataIntoShark'
    group = TEST_GROUP

    doLast {
        sourceSets.concurrencyTest.output.classesDir.eachFileRecurse { file ->
            if(!file.isFile() || containsExcludedNames(file)){
                return
            }
            def gatlingScenarioClass = getFullyQualifiedClassName(file)

            javaexec {
                main = 'com.excilys.ebi.gatling.app.Gatling'
                classpath = sourceSets.concurrencyTest.output + sourceSets.concurrencyTest.runtimeClasspath
                systemProperties = createSystemProperties()
                args '-sbf',
                        sourceSets.concurrencyTest.output.classesDir,
                        '-s',
                        gatlingScenarioClass,
                        '-rf',
                        'build/reports/gatling'
            }
        }
    }
}

def containsExcludedNames(File file){
    def excludes = ["Headers", "Responses", "Requests"]
    boolean excludeFound = false
    excludes.each {
        if(file.name.contains(it)){
            excludeFound = true
        }
    }
    return excludeFound
}

def getFullyQualifiedClassName(File file){
    (file.getPath() - (sourceSets.concurrencyTest.output.classesDir.getPath() + File.separator) - '.class').replace(File.separator, '.')
}

def createSystemProperties(){
    return [
        "mongo.host" : getMongoHost(),
        "shark.host" : getSharkHost()
    ]
}

task concurrencyTestWar(type: org.gradle.api.plugins.jetty.JettyRunWar) {
    description = "Launches an instance of neon used for concurrency tests"
    dependsOn 'concurrencyTestClasses'
    group = TEST_GROUP
    daemon = true
    httpPort = concurrencyTestPort
    stopPort = httpPort + 2
    stopKey = 'stop'
}

processConcurrencyTestResources {
    from(sourceSets.concurrencyTest.resources.srcDirs) {
        filter(ReplaceTokens, tokens: [
                "mongo.host": getMongoHost()
        ])
    }
}

task insertDataIntoMongo(type: com.ncc.neon.data.MongoDataInserter) {
    description = "Inserts data into mongo used by concurrency tests"
    dependsOn 'deleteDataFromMongoBeforeInsert', 'generateMongoJson'
    host = getMongoHost()
}
task deleteDataFromMongoBeforeInsert(type: com.ncc.neon.data.MongoDataDeleter) {
    description = "Deletes any old concurrency test data from mongo that may have been left around by previous tests"
    host = getMongoHost()
}

task insertDataIntoShark(type: com.ncc.neon.data.SharkDataInserter) {
    description = "Inserts data into shark used by concurrency tests"
    dependsOn 'deleteDataFromSharkBeforeInsert', 'generateSharkCSV', 'generateSharkJson'
    host = getSharkHost()
    hdfsUrl = getHdfsUrl()
}
task deleteDataFromSharkBeforeInsert(type: com.ncc.neon.data.SharkDataDeleter) {
    description = "Deletes any old concurrent tests data from shark that may have been left around by previous tests"
    host = getSharkHost()
}

task deleteDataFromMongo(type: com.ncc.neon.data.MongoDataDeleter) {
    description = "Deletes any concurrency test data from mongo"
    host = getMongoHost()
}

task deleteDataFromShark(type: com.ncc.neon.data.SharkDataDeleter) {
    description = "Deletes any concurrency test data from shark"
    host = getSharkHost()
}

task afterGatlingTest{
    description = "Cleans up any concurrency test data"
    group = TEST_GROUP
    dependsOn 'stopGatlingJetty', 'deleteDataFromMongo', 'deleteDataFromShark'
}

gatling.finalizedBy afterGatlingTest

task stopGatlingJetty(type: org.gradle.api.plugins.jetty.JettyStop) {
    description = "Stops the instance of neon used for concurrency testing"
    group = TEST_GROUP
    stopKey = 'stop'
    stopPort = concurrencyTestPort + 2
}
