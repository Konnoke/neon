import com.mongodb.BasicDBObject
import com.mongodb.MongoClient
import com.mongodb.util.JSON
import org.json.JSONArray

import static com.ncc.neon.AcceptanceTestJSHelperGenerator.*
import com.ncc.neon.HiveJSONGenerator
import com.ncc.neon.MongoJSONGenerator
import com.ncc.neon.JSONToCSVConverter
import com.ncc.common.GruntTask
import groovy.io.FileType
import org.apache.tools.ant.filters.ReplaceTokens

// define source sets first so tasks that act dynamically on sourcesets have a list of all of them
sourceSets {
    // contains the server integration tests
    integrationTest {
        resources {
            srcDir 'src/integrationTest/resources'
            srcDir 'src/test-data'
        }
    }
    acceptanceTest
}


apply from: 'gradle/groovy.gradle'
apply plugin: 'jetty'

// antlr plugin and configuration take from https://github.com/fraoch/antlr4-plugin/
apply plugin: 'antlr4'

archivesBaseName = 'neon'
sourceCompatibility = 1.7

def TEST_GROUP = JavaBasePlugin.VERIFICATION_GROUP
def springVersion = "3.2.1.RELEASE"
def logbackVersion = "1.0.9"

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'http://repository.codehaus.org/'
        }
        flatDir {
            dirs 'gradle/plugins'
        }
    }
    dependencies {
        classpath 'org.mongodb:mongo-java-driver:2.10.1'
        classpath ':antlr4-plugin:0.1'
    }
}

repositories {
    maven {
        url 'https://repository.cloudera.com/artifactory/public'
    }
}

project.ext {
    testDataDir = "${projectDir}/src/test-data"
    javadocTitle = "$libraryName API Documentation"

    // a mongo instance for inserting/deleting test data (will be lazy initialized)
    mongoInstance = null

    // used for determining when test data json needs to be generated
    testDataInputFileTree = fileTree('src/test-data').include('*.json')

    // because of this issue with the plugin https://github.com/fraoch/antlr4-plugin/issues/1, the
    // package using the antlr generated code must be the same as the package it is generated to
    antlrPackage = "com.ncc.neon.language"
    antlrGrammar = "Neon"
}


configurations {
    integrationTestCompile { extendsFrom testCompile }
    integrationTestRuntime { extendsFrom integrationTestCompile, testRuntime }

    acceptanceTestCompile { extendsFrom testCompile }
    acceptanceTestRuntime { extendsFrom testCompile, testRuntime }
}

dependencies {
    compile 'com.sun.jersey:jersey-servlet:1.15'
    compile 'com.sun.jersey:jersey-core:1.15'
    compile 'com.sun.jersey:jersey-client:1.15'
    compile 'com.sun.jersey:jersey-server:1.15'
    compile 'com.sun.jersey:jersey-json:1.15'
    compile 'com.sun.jersey.contribs:jersey-spring:1.15'
    compile 'org.mongodb:mongo-java-driver:2.10.1'
    compile "org.springframework:spring-web:$springVersion"
    compile 'joda-time:joda-time:2.1'
    compile 'org.slf4j:slf4j-api:1.7.2'
    compile "ch.qos.logback:logback-core:$logbackVersion"
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "com.google.guava:guava:14.0.1"
    compile 'org.antlr:antlr4:4.0'
    compile('org.codehaus.groovy.modules.http-builder:http-builder:0.6') {
        // we already include groovy-all
        exclude module: 'groovy'
    }
    compile 'commons-lang:commons-lang:2.6'
    compile 'org.json:json:20090211'
    compile('org.apache.hive:hive-jdbc:0.11.0') {
        exclude group: 'org.mortbay.jetty'
        // we already include slf4j
        exclude module: 'slf4j-log4j12'
    }

    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'

    runtime 'cglib:cglib:2.2.2'

    testCompile 'junit:junit:4.11'
    testCompile 'commons-collections:commons-collections:3.2.1'
    testCompile 'commons-io:commons-io:2.4'
    testCompile "org.springframework:spring-test:$springVersion"

    // commons-daemon 1.0.3 throws a bad organisation error (directory structure and pom don't match), so use a different version
    integrationTestCompile 'commons-daemon:commons-daemon:1.0.5'
    integrationTestCompile 'org.apache.hadoop:hadoop-common:2.0.0-cdh4.3.0'
    integrationTestCompile 'org.apache.hadoop:hadoop-hdfs:2.0.0-cdh4.3.0'

    integrationTestCompile sourceSets.main.output
    integrationTestCompile sourceSets.test.output

    antlr4 'org.antlr:antlr4:4.0'
    antlr4 'org.antlr:antlr4-runtime:4.0'
    antlr4 'org.antlr:antlr-runtime:3.5'
    antlr4 'org.antlr:ST4:4.0.7'
}

war {
    from(jsOutputFile) {
        into 'js'
    }

}

antlr4 {
    tool {
        "${antlrPackage}.${antlrGrammar}" {
            listener = true
            warnAsError = true
        }
    }
}

// copies the antlr generated files from build/antlr4-gen to src/main/groovy so we can commit them and IDEs can easily
// pick them up
task copyAntlrFilesToSrc(type: Copy) {
    dependsOn 'generate'
    def antlrPackageFilePath = antlrPackage.replaceAll("\\.", "/")
    from("${buildDir}/${generate.buildGenDir}/main/${antlrPackageFilePath}") {
        include '*.java'
    }
    into "${projectDir}/src/main/groovy/${antlrPackageFilePath}"
}

// remove full path info from the files
generate.doLast {
    def genDir = new File("${buildDir}/${generate.buildGenDir}")
    genDir.eachFileRecurse(FileType.FILES) { file ->
        def fullPathRegex = "(//.*?)[\\S]*(${antlrGrammar}\\.g4)"
        file.write(file.text.replaceAll(fullPathRegex, '$1$2'))
    }
}

compileGroovy.dependsOn copyAntlrFilesToSrc

test {
    def props = [:]
    props['unit.test'] = true
    systemProperties props
}

task integrationTest(type: Test) {
    dependsOn 'integrationTestClasses', 'generateMongoJson', 'generateHiveCSV', 'generateHiveJson'

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    // allow project properties and just pass them through to the system properties
    def props = [:]
    props["mongo.hosts"] = getMongoHosts()
    props["hive.host"] = getHiveHost()
    props["hdfs.url"] = getHdfsUrl()

    props['integration.test'] = true
    systemProperties props
}

task jacocoFullTestReport(type: JacocoReport) {
    dependsOn integrationTest
    executionData = files("$buildDir/jacoco/integrationTest.exec", "$buildDir/jacoco/test.exec")
    classDirectories = files(sourceSets.main.output.classesDir)
    sourceDirectories = files(sourceSets.main.output.classesDir)
}

task transformTestWebService(type: org.gradle.api.plugins.jetty.JettyRun) {
    dependsOn 'acceptanceTestClasses', 'generateAcceptanceTestHelpers'
    daemon = true
    httpPort = getAcceptanceTestServicePort()
    stopPort = httpPort + 2
    stopKey = 'stop'
    classpath = sourceSets.acceptanceTest.runtimeClasspath
    webXml = new File(sourceSets.acceptanceTest.output.resourcesDir, 'test-services-web.xml')
}

task acceptanceTestWar(type: org.gradle.api.plugins.jetty.JettyRunWar) {
    dependsOn 'acceptanceTestClasses', 'generateAcceptanceTestHelpers'
    daemon = true
    httpPort = getAcceptanceTestPort()
    stopPort = httpPort + 2
    stopKey = 'stop'
    jettyConfig = new File(sourceSets.acceptanceTest.output.resourcesDir, 'jetty-config.xml')
}

task generateAcceptanceTestHelpers {
    // since the properties may change in the build file, always regenerate this file
    outputs.upToDateWhen { false }
    doLast {
        def outputDir = new File(buildDir, "acceptanceTestSupport")
        generateJavascriptHelper("http://localhost:${getAcceptanceTestPort()}/neon", "http://localhost:${getAcceptanceTestServicePort()}", new File(outputDir, "ports.js"))
    }
}

processAcceptanceTestResources {
    from(sourceSets.acceptanceTest.resources.srcDirs) {
        filter(ReplaceTokens, tokens: [
                "mongo.hosts": getMongoHosts()
        ])
    }
}

// if the hosts are not specified just use an empty string and neon will choose defaults

def getMongoHosts() {
    return project.hasProperty("mongo.hosts") ? getProperty("mongo.hosts") : "localhost"
}

def getHiveHost() {
    return project.hasProperty("hive.host") ? getProperty("hive.host") : "localhost:10000"
}

def getHdfsUrl() {
    return project.hasProperty("hdfs.url") ? getProperty("hdfs.url") : "hdfs://localhost:8020"
}

def getAcceptanceTestPort() {
    return project.hasProperty("acceptanceTest.port") ? getProperty("acceptanceTest.port").toInteger() : 10002
}

// used for the transform service that runs as part of the acceptance test
def getAcceptanceTestServicePort() {
    // the test war runs on the acceptanceTestPort and the stop port is +2, so run the service on +4
    return getAcceptanceTestPort() + 4
}


task acceptanceTest(type: GruntTask) {
    dependsOn 'assemble', 'acceptanceTestWar', 'generateMongoJson', 'transformTestWebService'
    group = TEST_GROUP
    gruntArgs "jasmine:acceptance", "--outfile=${jsOutputFile}"

    doFirst {
        // just in case any data got left around in the event that a cleanup failed, delete the data before inserting it
        deleteAcceptanceTestData()
        insertAcceptanceTestData()
    }
}

gradle.taskGraph.afterTask { task ->
    if (task == acceptanceTest) {
        deleteAcceptanceTestData()
    }
}

task generateMongoJson {
    def outputDir = "${testDataDir}/mongo-json"
    inputs.files { testDataInputFileTree }
    outputs.dir { outputDir }
    // mongo only needs the data file for input. it uses the rest of the standard json files for test verification
    doLast {
        new MongoJSONGenerator().generateJson(testDataDir, outputDir, ~/data.json/)
    }
}

task generateHiveJson {
    def outputDir = "${testDataDir}/hive-json"
    inputs.files { testDataInputFileTree }
    outputs.dir { outputDir }
    doLast {
        new HiveJSONGenerator().generateJson(testDataDir, outputDir)
    }
}


task generateHiveCSV {
    def outputDir = "${testDataDir}/hive-csv"
    def inputFile = new File(testDataDir, 'data.json')
    inputs.file { inputFile }
    outputs.dir { outputDir }

    doLast {
        JSONToCSVConverter.convertToCSV(
                new JSONArray(inputFile.text).toString(),
                new File("${outputDir}/data.csv"),
                new File("${outputDir}/fields.csv"),
                ['location'] as Set)
    }
}

def insertAcceptanceTestData() {
    def db = getMongo().getDB("acceptanceTest")
    def collection = db.getCollection("records")
    def dbList = JSON.parse(new File(testDataDir, '/mongo-json/data.json').text)
    collection.insert(dbList)
    collection.ensureIndex(new BasicDBObject("location", "2dsphere"))
}

def deleteAcceptanceTestData() {
    def db = getMongo().getDB("acceptanceTest")
    db.dropDatabase()
}

def getMongo() {
    if (!mongoInstance) {
        mongoInstance = new MongoClient(getMongoHosts())
    }
    return mongoInstance
}
