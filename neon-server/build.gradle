/*
 * Copyright 2013 Next Century Corporation
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.json.JSONArray
import com.ncc.neon.SharkJSONGenerator
import com.ncc.neon.MongoJSONGenerator
import com.ncc.neon.JSONToCSVConverter
import org.gradle.api.plugins.jetty.internal.Monitor
import org.gradle.api.plugins.jetty.internal.JettyPluginWebAppContext

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'http://repository.codehaus.org/'
        }
        flatDir {
            dirs 'gradle/plugins'
        }
    }
    dependencies {
        classpath ':antlr4-plugin:0.1.1'
        classpath 'org.hidetake:gradle-ssh-plugin:0.2.0'
    }
}

repositories {
    maven {
        url 'https://repository.cloudera.com/artifactory/public'
        mavenCentral()
    }

    flatDir {
        dirs '../lib'
    }
}

project.ext {
    testDataDir = "${projectDir}/src/test-data"

    // a mongo instance for inserting/deleting test data (will be lazy initialized)
    mongoInstance = null

    // used for determining when test data json needs to be generated
    testDataInputFileTree = fileTree('src/test-data').include('*.json')
}


apply plugin: 'jetty'
apply plugin: 'war'

// these files need to be applied in order since there are dependencies between them
apply from: "${rootDir}/gradle/sharedDependencies.gradle"
apply from: "${rootDir}/gradle/js.gradle"
apply from: "gradle/integrationTest.gradle"
apply from: "gradle/acceptanceTest.gradle"
apply from: "gradle/performanceTest.gradle"

apply from: "${rootDir}/gradle/groovy.gradle"
apply from: "gradle/antlr.gradle"
apply from: "gradle/deploy.gradle"

sourceCompatibility = 1.7

configurations {
    // using slf4j
    compile.exclude module: 'commons-logging'
}

dependencies {
    compile 'com.sun.jersey:jersey-servlet:1.15'
    compile 'com.sun.jersey:jersey-core:1.15'
    compile 'com.sun.jersey:jersey-client:1.15'
    compile 'com.sun.jersey:jersey-server:1.15'
    compile 'com.sun.jersey:jersey-json:1.15'
    compile 'com.sun.jersey.contribs:jersey-spring:1.15'
    compile "org.springframework:spring-web:$springVersion"
    compile 'org.slf4j:slf4j-api:1.7.2'
    compile 'org.slf4j:jcl-over-slf4j:1.7.2'
    compile 'org.slf4j:log4j-over-slf4j:1.7.2'
    compile "ch.qos.logback:logback-core:$logbackVersion"
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "com.google.guava:guava:14.0.1"
    compile 'org.antlr:antlr4:4.0'
    compile('org.codehaus.groovy.modules.http-builder:http-builder:0.6') {
        // we already include groovy-all
        exclude module: 'groovy'
    }
    compile 'commons-lang:commons-lang:2.6'
    compile('org.apache.hadoop:hadoop-common:2.0.0-cdh4.3.0') {
        exclude group: 'org.mortbay.jetty'
        exclude group: 'javax.servlet'
        exclude group: 'javax.servlet.jsp'
        exclude module: 'jasper-compiler'
        exclude module: 'jasper-runtime'
        // using log4j-over-slf4j
        exclude module: 'log4j'
        exclude module: 'slf4j-log4j12'
    }
    compile 'jline:jline:0.9.94'
    compile 'com.googlecode.javaewah:JavaEWAH:0.3.2'
    compile 'javolution:javolution:5.5.1'
    compile 'com.github.stephenc.high-scale-lib:high-scale-lib:1.1.1'
    compile 'com.yammer.metrics:metrics-core:2.1.2'
    compile 'commons-dbcp:commons-dbcp:1.4'
    compile 'org.datanucleus:datanucleus-api-jdo:3.2.1'
    compile 'org.datanucleus:datanucleus-core:3.2.1'
    compile 'org.datanucleus:datanucleus-rdbms:3.2.1'
    compile 'javax.jdo:jdo2-api:2.3-ec'
    compile 'org.apache.derby:derby:10.4.2.0'
    compile('org.apache.thrift:libfb303:0.9.0') {
        exclude group: 'javax.servlet'
    }
    compile 'org.apache.thrift:libthrift:0.9.0'
    compile('org.apache.zookeeper:zookeeper:3.4.3') {
        exclude group: 'javax.servlet'
        // using log4j-over-slf4j
        exclude module: 'log4j'
        exclude module: 'slf4j-log4j12'

    }
    compile 'com.google.code.tempus-fugit:tempus-fugit:1.1'
    compile project(":metadata")

    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'

    runtime 'cglib:cglib:2.2.2'

    testCompile 'junit:junit:4.11'
    testCompile 'commons-collections:commons-collections:3.2.1'
    testCompile 'commons-io:commons-io:2.4'
    testCompile "org.springframework:spring-test:$springVersion"
}

war {
    description = 'Creates a war file for the project'
    from(jsOutputFile) {
        into 'js'
    }
}

task watch(type: com.ncc.common.GruntTask) {
    description = "Wrapper around grunt's watch task to rebuild javascript files if any change"
    background = true
    gruntArgs "watch", "--outfile=${jsOutputFile}"
}

jettyRun {
    dependsOn concatjs, watch
    reload = 'automatic'
    scanIntervalSeconds = 10
    httpPort = 8080

    webAppConfig = new JettyPluginWebAppContext()
    webAppConfig.baseResource = jettyRun.class.classLoader.loadClass('org.mortbay.resource.ResourceCollection').newInstance(
            [
                    file(webAppDirName).toString(),

                    // add the concatenated javascript so the widgets can access it by neon.js
                    buildDir.absolutePath,

                    // this lets us get to the examples directory using the /examples path, but unfortunately it also
                    // adds all of our base directories. this isn't really a problem just more clutter than is needed
                    rootDir.absolutePath
            ] as String[])

    doFirst {
        System.setProperty("log.dir", "${project.buildDir}/jettyRunLogs")
    }
}

[jettyRun, jettyRunWar, transformTestWebService, acceptanceTestWar, concurrencyTestWar]*.with {
    /**
     * THIS IS A WORKAROUND FOR JETTY LOCKING STATIC HTML FILES ON WINDOWS
     * 
     * When developing on Windows Jetty locks any static HTML files and resources, preventing on-the-fly
     * editing for quick development turn-around.  The work around for this is to override the 
     * default setting for useFileMappedBuffer in jetty's webdefault.xml file.  Here we've extracted
     * the Jetty 6.1.25 webdefault.xml and simply set useFileMappedBuffer to false.
     * 
     * References: 
     * http://issues.gradle.org/browse/GRADLE-727
     * http://stackoverflow.com/questions/11032342/gradle-jetty-plugin-locking-files
     */
    webDefaultXml = file("${projectDir}/webdefault.xml")
}

[jettyRun, jettyRunWar, transformTestWebService, acceptanceTestWar, concurrencyTestWar]*.doLast {
    /**
     * THIS IS A WORKAROUND! THE CURRENT VERSION OF THIS TASK DOESN'T START A WATCHER IN DAEMON MODE
     *
     * If starting the monitor fails, it may be because the jetty task was updated to fix this issue
     * When that happens, we shouldn't need the custom task any more
     *
     * http://issues.gradle.org/browse/GRADLE-2263
     */
    if (getStopPort() != null && getStopPort() > 0 && getStopKey() != null) {
        Monitor monitor = new Monitor(getStopPort(), getStopKey(), server.getProxiedObject());
        monitor.start();
    }
}

test {
    description = "Runs the neon unit tests"
    def props = [:]
    props['unit.test'] = true
    systemProperties props
}

jacocoTestReport {
    description = "Generates the neon Jacoco test coverage report"
    group = JavaBasePlugin.VERIFICATION_GROUP
    dependsOn integrationTest
    executionData = files("$buildDir/jacoco/integrationTest.exec", "$buildDir/jacoco/test.exec")
    classDirectories = files(sourceSets.main.output.classesDir)
    sourceDirectories = files(sourceSets.main.output.classesDir)
}

// helper functions for generating data for the tests. this is used by several of the gradle files that configure the tests

task generateMongoJson {
    description = "Generates json files with mongo specific constructs that are used for validating mongo test results"
    def outputDir = "${testDataDir}/mongo-json"
    inputs.files { testDataInputFileTree }
    outputs.dir { outputDir }
    // mongo only needs the data file for input. it uses the rest of the standard json files for test verification
    doLast {
        new MongoJSONGenerator().generateJson(testDataDir, outputDir, ~/data.json/)
    }
}

task generateSharkJson {
    description = "Generates json files with shark specific constructs that are used for validating shark test results"
    def outputDir = "${testDataDir}/shark-json"
    inputs.files { testDataInputFileTree }
    outputs.dir { outputDir }
    doLast {
        new SharkJSONGenerator().generateJson(testDataDir, outputDir)
    }
}

task generateSharkCSV {
    description = "Generates csv files for inserting test data into shark"
    def outputDir = "${testDataDir}/shark-csv"
    def inputFile = new File(testDataDir, 'data.json')
    inputs.file { inputFile }
    outputs.dir { outputDir }

    doLast {
        JSONToCSVConverter.convertToCSV(
                new JSONArray(inputFile.text).toString(),
                new File("${outputDir}/data.csv"),
                new File("${outputDir}/fields.csv"),
                ['location'] as Set)
    }
}

// if the host is not specified just use an empty string and neon will choose defaults
def getMongoHost() {
    return project.hasProperty("mongo.host") ? getProperty("mongo.host") : "localhost"
}

def getSharkHost() {
    return project.hasProperty("shark.host") ? getProperty("shark.host") : "localhost:10000"
}

def getHdfsUrl() {
    return project.hasProperty("hdfs.url") ? getProperty("hdfs.url") : "hdfs://localhost:8020"
}