apply plugin: 'maven-publish'
apply plugin: 'java'
import org.ajoberstar.gradle.git.tasks.*

def RELEASE_GROUP = "Release"


buildscript {
    repositories { mavenCentral() }
    dependencies { classpath 'org.ajoberstar:gradle-git:0.6.3' }
}


repositories {
    maven {
        url "http://build-va/maven-repo/repositories/internal/releases"
    }
}

configurations {
    installerShell
}

dependencies {
    installerShell 'neon:neon-installer-shell:1.0'
}

group = "com.ncc.neon"
publishing {
    publications {
        neon(MavenPublication) {
            artifactId 'neon'
            project(":neon-server").tasks.war.baseName = "neon"
            artifact project(":neon-server").tasks.war

        }
        bundle(MavenPublication){
            artifactId 'neon-bundle'
            artifact zipNeonBundle
        }
    }

    repositories {
        maven {
            url "http://build-va/nexus/content/repositories/internal-releases"
        }
    }
}

task release(){
    description = "Releases the project with the current version. This will tag the project in git and upload the versioned neon.war to nexus."
    group = RELEASE_GROUP
    dependsOn 'pushTag', 'publish'
}

task verifyMasterBranch(type: GitBranchList) << {
    if(getWorkingBranch().name != "master"){
        throw new GradleException("Not currently on the git master branch, so tagging will not work. Aborting the release.")
    }
}

task verifyVersion() << {
    description = "Allows a user to verify the version"
    group = RELEASE_GROUP

    def version = project.version
    if(version == "unspecified"){
        throwVersionError()
    }

    String question = "\nThe current version is '${version}'. Continue with the release? [y/n] "
    def verify

    def console = System.console()
    if(console){
        verify = console.readLine(question)
    }
    else{
        println question
        def reader = System.in.newReader()
        verify = reader.readLine()
    }
    if(!verify.equalsIgnoreCase("y")){
        throwVersionError()
    }
}

task tagWithCurrentVersion(type: GitTag) {
    description = "Tags the current version in git"
    group = RELEASE_GROUP

    dependsOn 'build', 'verifyMasterBranch', 'verifyVersion'
    tagName = version
    message = "Release of ${project.version}"
}

task pushTag(type: GitPush) {
    description = "Pushes the tag to the remote origin"
    group = RELEASE_GROUP

    dependsOn 'tagWithCurrentVersion'
    namesOrSpecs = [version]
}

task unzipInstallerShell(type: Copy){
    description = "Unzips the installer shell into a build directory"
    group = RELEASE_GROUP
    def zipFile = configurations.installerShell.find { return it}
    def unZippedDir = file("${buildDir}/installer")
    from zipTree(zipFile)
    into unZippedDir

}

task buildAllWars() {
    def projects = project.getParent().getAllprojects().findAll { it.getTasksByName("war", false) }
    def tasks = projects.collect { it.tasks.war}
    dependsOn tasks
}

task copyWarsIntoInstaller(type: Copy) {
    dependsOn 'unzipInstallerShell', 'buildAllWars'
    into "${buildDir}/installer/neon-bundle/apache-tomcat-7.0.21/webapps"

    def projects = project.getParent().getAllprojects().findAll { it.getTasksByName("war", false) }
    projects.each{
        from it.libsDir
    }

    rename { fileName ->
        def baseName = fileName.substring(0, fileName.lastIndexOf("-"))
        baseName = (baseName == "neon-server") ? "neon" : baseName
        return "${baseName}.war"
    }
}

task zipNeonBundle(type: Zip) {
    dependsOn 'copyWarsIntoInstaller'
    from "${buildDir}/installer"
    baseName = 'neon-bundle'
}

void throwVersionError(){
    throw new GradleException("Please update the project version. It is currently ${version}")
}
