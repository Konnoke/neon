/*
 * Copyright 2013 Next Century Corporation
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Defines utility methods used by other gradle files that generate documentation

project.ext {
    libraryName = "${project.name}-${project.version}"
    javadocDir = "${project.docsDir}/javadocs"
    javadocTitle = "${libraryName} Javadocs"
}

/**
 * Configures the zip task to create a zip the documentation generated by the docs task
 * @param copyDocsTask
 * @param zipTask
 * @param buildDir
 */
project.ext.zipDocs =  { copyDocsTask, zipTask, buildDir ->
    zipTask.from new File(copyDocsTask.zipDir).parent
    zipTask.destinationDir buildDir
    zipTask.archiveName "${copyDocsTask.zipBaseName}.zip"
}

/**
 * Configures a copy task to copy documentation into another directory for zipping
 * @param classifier A string appended to the doc zip file name (e.g. javadoc)
 * @param libraryName The name of the library whose docs are being created
 * @param copyTask The task being configured for copying
 * @param docDir The directory containing the documentation to be zipped
 */
project.ext.copyDocsIntoZipDir =  { classifier, libraryName, copyTask, docDir ->
    copyTask.ext.zipBaseName = "$libraryName-$classifier"

    // the zipDir is another directory with the same name as the zip file
    // used as the top level directory in the zip
    copyTask.ext.zipDir = "${copyTask.temporaryDir}/$copyTask.zipBaseName"

    copyTask.doFirst {
        new File(zipDir).mkdirs()
    }

    copyTask.from new File(docDir).path
    copyTask.into copyTask.zipDir

}
