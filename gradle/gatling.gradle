apply plugin: 'scala'
apply plugin: 'jetty'

def concurrencyTestSourceDir = 'src/concurrencyTest/scala'
def concurrencyTestPort = 11402
def GATLING_GROUP = "Gatling"

repositories {
    mavenCentral()
    maven { url "http://repository.excilys.com/content/groups/public" }
}

configurations {
    concurrencyTestCompile
    concurrencyTestRuntime { extendsFrom concurrencyTestCompile }
}

sourceSets {
    concurrencyTest {
        scala.srcDir file(concurrencyTestSourceDir)
        compileClasspath = configurations.concurrencyTestCompile
        runtimeClasspath = output + compileClasspath + configurations.concurrencyTestRuntime
    }
}

dependencies {
    compile 'org.scala-lang:scala-library:2.10.3'
    concurrencyTestCompile("com.excilys.ebi.gatling.highcharts:gatling-charts-highcharts:1.5.3")
    concurrencyTestRuntime "com.excilys.ebi.gatling:gatling-app:1.5.3"
}

task gatling {
    dependsOn 'concurrencyTestWar', 'insertDataIntoMongo', 'insertDataIntoHive'
    group = GATLING_GROUP
    doLast {
        sourceSets.concurrencyTest.output.classesDir.eachFileRecurse { file ->
            if (file.isFile()) {
                //Remove the full path, .class and replace / with a .
                def gatlingScenarioClass = (file.getPath() - (sourceSets.concurrencyTest.output.classesDir.getPath() + File.separator) - '.class')
                        .replace(File.separator, '.')
                javaexec {
                    main = 'com.excilys.ebi.gatling.app.Gatling'
                    classpath = sourceSets.concurrencyTest.output + sourceSets.concurrencyTest.runtimeClasspath
                    args '-sbf',
                            sourceSets.concurrencyTest.output.classesDir,
                            '-s',
                            gatlingScenarioClass,
                            '-rf',
                            'build/reports/gatling',
                            '-bf',
                            'src/concurrencyTest/resources/request-bodies'
                }
            }
        }
    }
}

task copyConcurrencyWebapp(type: Copy) {
    from 'src/concurrencyTest/webapp'
    into "${buildDir}/tmp/concurrencyTestWar/webapp"
}

task concurrencyRecorder(type: org.gradle.api.plugins.jetty.JettyRunWar) {
    dependsOn 'compileConcurrencyTestScala', 'copyConcurrencyWebapp'
    group = GATLING_GROUP
    daemon = false
    httpPort = concurrencyTestPort
}

task concurrencyTestWar(type: org.gradle.api.plugins.jetty.JettyRunWar) {
    dependsOn 'compileConcurrencyTestScala'
    group = GATLING_GROUP
    daemon = true
    httpPort = concurrencyTestPort
    stopPort = httpPort + 2
    stopKey = 'stop'
}

task insertDataIntoMongo(type: com.ncc.neon.data.MongoDataInserter) {
    dependsOn 'deleteDataFromMongoBeforeInsert', 'generateMongoJson'
    host = getMongoHost()
}
task deleteDataFromMongoBeforeInsert(type: com.ncc.neon.data.MongoDataDeleter) {
    host = getMongoHost()
}

task insertDataIntoHive(type: com.ncc.neon.data.HiveDataInserter) {
    dependsOn 'deleteDataFromHiveBeforeInsert', 'generateHiveCSV', 'generateHiveJson'
    host = getHiveHost()
    hdfsUrl = getHdfsUrl()
}
task deleteDataFromHiveBeforeInsert(type: com.ncc.neon.data.HiveDataDeleter) {
    host = getHiveHost()
}

task afterGatlingTest{
    group = GATLING_GROUP
    dependsOn 'stopGatlingJetty', 'deleteDataFromMongo', 'deleteDataFromHive'
}

gatling.finalizedBy afterGatlingTest

task stopGatlingJetty(type: org.gradle.api.plugins.jetty.JettyStop) {
    group = GATLING_GROUP
    stopKey = 'stop'
    stopPort = concurrencyTestPort + 2
}

task deleteDataFromMongo(type: com.ncc.neon.data.MongoDataDeleter) {
    host = getMongoHost()
}

task deleteDataFromHive(type: com.ncc.neon.data.HiveDataDeleter) {
    host = getHiveHost()
}

def getMongoHost() {
    return project.hasProperty("mongo.hosts") ? getProperty("mongo.hosts") : "localhost"
}

def getHiveHost() {
    return project.hasProperty("hive.host") ? getProperty("hive.host") : "localhost:10000"
}

def getHdfsUrl() {
    return project.hasProperty("hdfs.url") ? getProperty("hdfs.url") : "hdfs://localhost:8020"
}

import org.gradle.api.plugins.jetty.internal.Monitor

concurrencyTestWar.doLast {
    /**
     * THIS IS A WORKAROUND! THE CURRENT VERSION OF THIS TASK DOESN'T START A WATCHER IN DAEMON MODE
     *
     * If starting the monitor fails, it may be because the jetty task was updated to fix this issue
     * When that happens, we shouldn't need the custom task any more
     *
     * http://issues.gradle.org/browse/GRADLE-2263
     */
    if (getStopPort() != null && getStopPort() > 0 && getStopKey() != null) {
        Monitor monitor = new Monitor(getStopPort(), getStopKey(), server.getProxiedObject());
        monitor.start();
    }
}

