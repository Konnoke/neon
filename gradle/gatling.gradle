apply plugin: 'scala'
apply plugin: 'jetty'

def concurrencyTestSourceDir = 'src/concurrencyTest/scala'
def concurrencyTestPort = 11402
def GATLING_GROUP = "Gatling"

repositories {
    mavenCentral()
    maven { url "http://repository.excilys.com/content/groups/public" }
}

configurations {
    concurrencyTestCompile
    concurrencyTestRuntime { extendsFrom concurrencyTestCompile }
}

sourceSets {
    concurrencyTest {
        scala.srcDir file(concurrencyTestSourceDir)
        compileClasspath = configurations.concurrencyTestCompile
        runtimeClasspath = output + compileClasspath + configurations.concurrencyTestRuntime
    }
}

dependencies {
    compile 'org.scala-lang:scala-library:2.10.3'
    concurrencyTestCompile("com.excilys.ebi.gatling.highcharts:gatling-charts-highcharts:1.5.3")
    concurrencyTestRuntime "com.excilys.ebi.gatling:gatling-app:1.5.3"
}

task gatling{
    dependsOn 'stopGatlingJetty'
    group = GATLING_GROUP
    description = "Runs all gatling tests against a jetty server."
}

task runGatlingTests(dependsOn: 'concurrencyTestWar') << {
    group = GATLING_GROUP
    sourceSets.concurrencyTest.output.classesDir.eachFileRecurse { file ->
        if (file.isFile()) {
            //Remove the full path, .class and replace / with a .
            def gatlingScenarioClass = (file.getPath() - (sourceSets.concurrencyTest.output.classesDir.getPath() + File.separator) - '.class')
                    .replace(File.separator, '.')
            javaexec {
                main = 'com.excilys.ebi.gatling.app.Gatling'
                classpath = sourceSets.concurrencyTest.output + sourceSets.concurrencyTest.runtimeClasspath
                args  '-sbf',
                        sourceSets.concurrencyTest.output.classesDir,
                        '-s',
                        gatlingScenarioClass,
                        '-rf',
                        'build/reports/gatling'
            }
        }
    }
}

task stopGatlingJetty(type: org.gradle.api.plugins.jetty.JettyStop){
    dependsOn 'runGatlingTests'
    group = GATLING_GROUP
    stopKey = 'stop'
    stopPort = concurrencyTestPort + 2

}

task concurrencyTestWar(type: org.gradle.api.plugins.jetty.JettyRunWar) {
    dependsOn 'compileConcurrencyTestScala'
    group = GATLING_GROUP
    daemon = true
    httpPort = concurrencyTestPort
    stopPort = httpPort + 2
    stopKey = 'stop'
}


import org.gradle.api.plugins.jetty.internal.Monitor
concurrencyTestWar.doLast {
    /**
     * THIS IS A WORKAROUND! THE CURRENT VERSION OF THIS TASK DOESN'T START A WATCHER IN DAEMON MODE
     *
     * If starting the monitor fails, it may be because the jetty task was updated to fix this issue
     * When that happens, we shouldn't need the custom task any more
     *
     * http://issues.gradle.org/browse/GRADLE-2263
     */
    if (getStopPort() != null && getStopPort() > 0 && getStopKey() != null) {
        Monitor monitor = new Monitor(getStopPort(), getStopKey(), server.getProxiedObject());
        monitor.start();
    }
}