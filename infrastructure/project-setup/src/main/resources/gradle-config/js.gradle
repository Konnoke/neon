// used for performing common javascript tasks

// requires the following in buildSrc:
//     com.ncc.common.DocUtils
//     com.ncc.commmon.GruntTask

// contains tasks for copying a package.json.template file to multiple subprojects to share a common package.json

// contains a task for generating documentation using yuidoc. the yuidoc folder is generally in the root project folder

import org.apache.tools.ant.filters.ReplaceTokens
import com.ncc.common.GruntTask

apply from: 'gradle/docs.gradle'

project.ext {
    jsDocDir = "${project.docsDir}/jsdocs"
    jsSrcDir = 'src/main/javascript'
    jsLibDir = 'src/main/js-lib'
    def filePrefix = project.hasProperty('outfile') ? project.outfile : project.name
    combinedJsFileName = "${filePrefix}.js"
    jsOutputFile = "${buildDir}/${combinedJsFileName}"

    // where javascript/css dependencies from other projects are copied
    jsDependenciesDir = "${buildDir}/jsdependencies"
    jsDependenciesOutputDir = file("${jsDependenciesDir}/js")
    cssDependenciesOutputDir = file("${jsDependenciesDir}/css")
}

task gruntjs(type: GruntTask) {
    gruntArgs "--outfile=${jsOutputFile}"
}

task installGruntDeps(type: Exec) {
    dependsOn 'createPackageJson'
    inputs.file "${projectDir}/package.json"
    outputs.dir "${projectDir}/node_modules"
    commandLine "npm", "install"
}

task createPackageJson(type: Copy) {
    inputs.file "${rootDir}/package.json.template"
    outputs.file "${projectDir}/package.json"
    from rootDir
    into projectDir
    include "package.json.template"
    rename "package.json.template", "package.json"
    filter(ReplaceTokens, tokens: [
            "name": project.name,
            "version": project.version.split("-")[0]
    ])
}

task jsDocs(type: Exec) {
    description = 'Creates the javascript API documentation.'
    group = "Documentation"

    // replace the tokens in the yuidoc descriptor file
    doFirst {
        new File(jsDocDir).mkdirs()
        copy {
            includeEmptyDirs = false
            from("${rootDir}/yuidoc") {
                include('**/*.json')
                // replace the tokens in the yuidoc file and put it in a temp dir so the yuidoc task can access it.
                // this file is not part of the final docs output
                filter(ReplaceTokens, tokens: [
                        projectDir: projectDir.absolutePath,
                        libraryName: libraryName.toString(),
                        outDir: jsDocDir.toString()
                ]
                )
            }
            into temporaryDir
        }
    }
    commandLine "${projectDir}/node_modules/.bin/yuidoc", "-c", "$temporaryDir/yuidoc.json"

    // copy the images after the yuidoc tasks runs because the yuidoc task will delete the output directory
    // these files are needed for the final docs output since they will be referenced in the html output
    doLast {
        copy {
            from("${rootDir}/yuidoc") {
                include('images/*')
            }
            into jsDocDir
        }
    }
}

task copyJsDocs(type: org.gradle.api.tasks.Copy) {
    description = 'Copies the javascript documentation to a directory to be zipped'
    dependsOn 'jsDocs'
    copyDocsIntoZipDir('javascript-api-docs', libraryName, copyJsDocs, jsDocDir)
}

task zipJsDocs(type: Zip) {
    description = 'Creates a zip file containing the javascript API documentation'
    dependsOn 'copyJsDocs'
    zipDocs(copyJsDocs, zipJsDocs, project.buildDir)
}

// yuidoc will look in src/main/javascript for the js files
[jsDocs, copyJsDocs, zipJsDocs]*.onlyIf {
    project.file(jsSrcDir).exists()
}

project.assemble.dependsOn 'gruntjs'

project.tasks.withType(GruntTask) { task ->
    // use the locally installed grunt
    task.doFirst {
        task.executable = "${projectDir}/node_modules/.bin/${GruntTask.GRUNT_EXECUTABLE}"
    }

    task.dependsOn 'installGruntDeps'
}
