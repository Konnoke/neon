import org.apache.tools.ant.taskdefs.condition.Os

defaultTasks 'clean', 'build'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.eriwen:gradle-js-plugin:1.1'
    }
}

repositories {
    mavenCentral()
}

def wrapperVersion = '1.3'


// task groupings we add
def DEPLOY_GROUP = 'deploy'

def owfTomcat = (hasProperty('OWF_TOMCAT') ? OWF_TOMCAT : System.env.OWF_TOMCAT) ?: '/opt/owf/apache-tomcat-7.0.21'
def owfTomcatWebapps = owfTomcat + '/webapps'


subprojects {

    apply plugin: 'war'
    apply plugin: 'js'
    apply plugin: 'idea'
    apply plugin: 'jetty'

    version = '1.0-SNAPSHOT'

    def jettyPort =  project.hasProperty('jettyPort') ? jettyPort.toInteger() : 8080
    httpPort = jettyPort
    stopPort = httpPort + 2
    stopKey = 'stop'


    jshint {
        dest = file("${buildDir}/jshint.out")
        doLast {
            def results = dest.text
            if (!results.isEmpty()) {
                def builder = new StringBuilder();
                builder.append("JSHint failed with errors. See output at ")
                        .append(dest.path)
                        .append(System.properties['line.separator'])
                        .append(System.properties['line.separator'])
                        .append(results)
                throw new GradleException(builder.toString())
            }
        }
    }

    war {
        description = 'Creates a war file for the project'

        // strip out the version from the war
        version ""
    }


    task deployToTomcat {
        dependsOn 'war'
        description = "Copies the project's war file to the owf tomcat webapps dir"
        group = DEPLOY_GROUP
        doLast {
            println "Copying $war.archivePath into $owfTomcatWebapps"
            copy {
                from war.archivePath
                into owfTomcatWebapps
            }
        }
    }


    task wrapper(type: Wrapper) {
        gradleVersion = wrapperVersion
    }

}


task wrapper(type: Wrapper) {
    gradleVersion = wrapperVersion
}
